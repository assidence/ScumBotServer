package main

import (
	"ScumBotServer/client/execModules"
	"bufio"
	"fmt"
	"net"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"syscall"
)

func startAutoReConnectEXE(initChan chan struct{}) {
	// 获取当前 Go 程序的工作目录
	wd, err := os.Getwd()
	if err != nil {
		fmt.Println("获取工作目录失败:", err)
		return
	}

	// 基于工作目录组合 AHK exe 的路径
	ahkPath := filepath.Join(wd, "AHK", "AutoReConnect.exe")
	exeDir := filepath.Dir(ahkPath)

	cmd := exec.Command(ahkPath)
	cmd.Dir = exeDir

	// 可选：隐藏窗口（后台运行）
	cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}

	// 启动 AHK exe
	err = cmd.Start()
	if err != nil {
		fmt.Println("启动 AHK exe 出错:", err)
		return
	}

	fmt.Println("AHK exe 已启动，PID:", cmd.Process.Pid)
	close(initChan)
}

func main() {
	address := ""
	reader := bufio.NewScanner(os.Stdin)
	fmt.Print("请输入ScumBot-服务端的地址: ")
	reader.Scan() // 阻塞直到用户输入回车
	address = reader.Text()
	if address == "" {
		fmt.Println("用户直接按了回车，使用默认值")
		address = "0.0.0.0:20500"
	}
	var execCommand = make(chan map[string]interface{})
	re := regexp.MustCompile(`\{[^}]*\}`)
	go commandExecuter(execCommand)
	go execModules.FocusWindows("SCUM  ")
	initChan := make(chan struct{})
	go startAutoReConnectEXE(initChan)
	<-initChan
	for {
		NetworkSignal := make(chan struct{})
		conn := HttpClient(address)
		defer func(conn net.Conn) {
			err := conn.Close()
			if err != nil {
				panic(err)
			}
		}(conn)
		go commandReader(re, conn, execCommand, NetworkSignal)
		<-NetworkSignal
	}
}
